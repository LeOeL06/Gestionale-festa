
import java.awt.Color;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Locale;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author 9627
 */
public class Festa extends javax.swing.JFrame {

    public static float aperturaCassa=0;
    public static float chiusuraCassa=0;
    public static LocalDateTime adesso = LocalDateTime.now();
    public static String dataOdierna;
    public static String nomeFesta = "Festa dei pompieri 2024";
    public static DateTimeFormatter formatoData = DateTimeFormatter.ofPattern("dd-MM-yyyy", Locale.ITALIAN);
    public static DateTimeFormatter formatoOra = DateTimeFormatter.ofPattern("HH:mm:ss", Locale.ITALIAN);
    public static boolean aperturaDaInserire;
    public static String nomiFile[] = {"MenuCibo","MenuBere"};
    public static int nCibo =-1;
    public static int nBere =-1;
    public static int nRicevute =0;
    public static ArrayList<String> prodottiAcquistatiGen = new ArrayList<String>();
    public static ArrayList<Integer> numeroProdottiAcquistatiGen = new ArrayList<Integer>();
    /**
     * Creates new form Festa
     */
    public Festa() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        pannelloIntestazione = new javax.swing.JPanel();
        pannelloNomeFesta = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pannelloSottoIntestazione = new javax.swing.JPanel();
        labelAperturaCassa = new javax.swing.JLabel();
        labelData = new javax.swing.JLabel();
        pannelloBottoneConto = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboInserimentoProdotto = new javax.swing.JComboBox<>();
        campoNomeNuovoProdotto = new javax.swing.JTextField();
        campoPrezzoNuovoProdotto = new javax.swing.JTextField();
        bottoneConto = new javax.swing.JButton();
        bottoneChiusuraCassa = new javax.swing.JButton();
        bottoneInserimentoProdotto = new javax.swing.JButton();
        pannello2Tabelle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabellaCibo = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabellaBere = new javax.swing.JTable();

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                chiusuraProgrammaCassa(evt);
            }
        });

        pannelloIntestazione.setLayout(new java.awt.GridLayout(2, 1));

        pannelloNomeFesta.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.disabledShadow"));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Nome festa");
        pannelloNomeFesta.add(jLabel1);

        pannelloIntestazione.add(pannelloNomeFesta);

        pannelloSottoIntestazione.setLayout(new java.awt.GridLayout(1, 2));

        labelAperturaCassa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAperturaCassa.setText("APERTURA DI CASSA");
        pannelloSottoIntestazione.add(labelAperturaCassa);

        labelData.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelData.setText("DATA");
        pannelloSottoIntestazione.add(labelData);

        pannelloIntestazione.add(pannelloSottoIntestazione);

        getContentPane().add(pannelloIntestazione, java.awt.BorderLayout.PAGE_START);

        pannelloBottoneConto.setPreferredSize(new java.awt.Dimension(300, 125));
        pannelloBottoneConto.setLayout(new java.awt.GridLayout(3, 4));

        jLabel2.setText("  MODIFICA PRODOTTI:");
        jLabel2.setToolTipText("");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel2.setPreferredSize(new java.awt.Dimension(20, 6));
        pannelloBottoneConto.add(jLabel2);

        jLabel4.setText(" NOME:");
        jLabel4.setToolTipText("");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel4.setPreferredSize(new java.awt.Dimension(20, 6));
        pannelloBottoneConto.add(jLabel4);

        jLabel3.setText(" PREZZO:");
        jLabel3.setToolTipText("");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel3.setPreferredSize(new java.awt.Dimension(20, 6));
        pannelloBottoneConto.add(jLabel3);

        comboInserimentoProdotto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cucina", "Bevande/Bar" }));
        comboInserimentoProdotto.setToolTipText("Seleziona il tipo di prodotto");
        pannelloBottoneConto.add(comboInserimentoProdotto);

        campoNomeNuovoProdotto.setToolTipText("Inserisci il nome del prodotto");
        pannelloBottoneConto.add(campoNomeNuovoProdotto);

        campoPrezzoNuovoProdotto.setToolTipText("Inserisci il prezzo del prodotto");
        pannelloBottoneConto.add(campoPrezzoNuovoProdotto);

        bottoneConto.setBackground(new java.awt.Color(51, 88, 129));
        bottoneConto.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bottoneConto.setForeground(new java.awt.Color(255, 255, 255));
        bottoneConto.setText("VAI AL CONTO");
        bottoneConto.setToolTipText("Stampa lo scontrino");
        bottoneConto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bottoneConto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottoneContoActionPerformed(evt);
            }
        });
        pannelloBottoneConto.add(bottoneConto);

        bottoneChiusuraCassa.setBackground(new java.awt.Color(51, 88, 129));
        bottoneChiusuraCassa.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bottoneChiusuraCassa.setForeground(new java.awt.Color(255, 255, 255));
        bottoneChiusuraCassa.setText("CHIUSURA DI CASSA");
        bottoneChiusuraCassa.setToolTipText("Inserisci la chiusura di cassa e chiudi il programma");
        bottoneChiusuraCassa.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bottoneChiusuraCassa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottoneChiusuraCassaActionPerformed(evt);
            }
        });
        pannelloBottoneConto.add(bottoneChiusuraCassa);

        bottoneInserimentoProdotto.setBackground(new java.awt.Color(51, 88, 129));
        bottoneInserimentoProdotto.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bottoneInserimentoProdotto.setForeground(new java.awt.Color(255, 255, 255));
        bottoneInserimentoProdotto.setText("MODIFICA ELEMENTO");
        bottoneInserimentoProdotto.setToolTipText("Aggiungi, modifica il prezzo o rimuovi un elemento dalla tabella");
        bottoneInserimentoProdotto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bottoneInserimentoProdotto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottoneInserimentoProdottoActionPerformed(evt);
            }
        });
        pannelloBottoneConto.add(bottoneInserimentoProdotto);

        getContentPane().add(pannelloBottoneConto, java.awt.BorderLayout.PAGE_END);

        pannello2Tabelle.setLayout(new java.awt.GridLayout(1, 2));

        tabellaCibo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Qta", "Cucina", "Prezzo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabellaCibo.setInheritsPopupMenu(true);
        tabellaCibo.setShowGrid(true);
        jScrollPane1.setViewportView(tabellaCibo);

        pannello2Tabelle.add(jScrollPane1);

        tabellaBere.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Qta", "Bevande/Bar", "Prezzo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabellaBere.setInheritsPopupMenu(true);
        tabellaBere.setShowGrid(true);
        jScrollPane2.setViewportView(tabellaBere);

        pannello2Tabelle.add(jScrollPane2);

        getContentPane().add(pannello2Tabelle, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /* in questo metodo passo ogni riga delle tabelle dei prodotti e le salvo in un file csv
        per essere riutilizzate all'apertura successiva del programma */
    public void salvaMenu(){
        
        for(int i = 0;i<2;i++){
            FileWriter f=null;
            PrintWriter fOUT= null;
            try {
                f=new FileWriter(nomiFile[i] + ".txt");
                fOUT=new PrintWriter(f);
            } catch (IOException e) {
                System.out.println("Errore nell'apertura del file");
                System.exit(1);
            }
            if(i ==0){
                for(int j = 0;j<=nCibo;j++){
                    String nomeTemp = (String) tabellaCibo.getValueAt(j, 1);
                    float prezzoTemp = (float)tabellaCibo.getValueAt(j, 2);
                    fOUT.println(nomeTemp + "-"+ prezzoTemp);
                }
            } else {
                for(int j = 0;j<=nBere;j++){
                    String nomeTemp = (String) tabellaBere.getValueAt(j, 1);
                    float prezzoTemp = (float)tabellaBere.getValueAt(j, 2);
                    fOUT.println(nomeTemp + "-"+ prezzoTemp);
                }
            }
            
            try{
                f.close();
            }
            catch(IOException e){
                System.out.println("Errore nella chiusura del file");
                System.exit(1);
            }
        }
        

    }
    // ritorno il valore della chiusura di cassa inserito dall'utente
    public float chisuraCassaAzione(){
        boolean ripeti=false;
        do {
            String input = JOptionPane.showInputDialog(null, "Chiusura di cassa:", "Chiusura cassa", JOptionPane.INFORMATION_MESSAGE);
            try {
                chiusuraCassa = Float.parseFloat(input);
                // Fai qualcosa con il numero inserito (es. stampalo
                float differenza = chiusuraCassa - aperturaCassa;
                return differenza;
            }       
            catch (Exception ex) {
                if(!(input==null)){
                    JOptionPane.showMessageDialog(this, "Inserisci un numero valido", "Errore", JOptionPane.ERROR_MESSAGE);
                    ripeti=true;
                } else {
                    return -1;
                }
            }
        } while(ripeti);
        return 0;
    }
    // carico dal file txt l'ultimo giorno di utilizzo e il numero di ricevute
    // se cambia il giorno, il numero delle ricvute partirà da 0, in caso contrario viene caricato quello precedente
    public static void caricaInfo(){
        
        FileReader f= null;
        BufferedReader fIN=null;
        String s;
        try {
            f=new FileReader("Info.txt");
            fIN =new BufferedReader(f);
        } catch (IOException e) {
        }
        try {
            s= fIN.readLine();
            if(s.equals(dataOdierna)){
                nRicevute=Integer.valueOf(fIN.readLine());
            }
        } catch (Exception e) {
        }
        try{
            f.close();
        }catch(Exception e){
        }

    }
    // in caso l'apertura di cassa non è stata inserita all'apertura, viene richiesto l'inserimento
    private void bottoneChiusuraCassaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottoneChiusuraCassaActionPerformed
        if(aperturaDaInserire){
            String valore = JOptionPane.showInputDialog(null, "Apertura di cassa:", "Apertura cassa", JOptionPane.INFORMATION_MESSAGE);
            try {
                if(valore!=null){
                    float numero = Float.parseFloat(valore);
                    aperturaCassa=numero;
                } else {
                    return;
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Inserisci un numero valido", "Errore", JOptionPane.ERROR_MESSAGE);
            }

        }
        // viene calcolata la differenza tra apertura e chiusura e viene salvata insieme ad esse in un file csv insieme alla data di salvataggio
        float differenza = chisuraCassaAzione();
        if(differenza!=-1){
            salvaMenu();
            FileWriter f=null;
            PrintWriter fOUT= null;
            File file = new File("Cassa.csv");
            boolean esiste = file.exists();
            try {
                f=new FileWriter("Cassa.csv",true);
                fOUT=new PrintWriter(f);
            } catch (IOException e) {
                System.exit(1);
            }
            if(!esiste){
                fOUT.println("Apertura;Chiusura;Differenza;Data");
            }
            fOUT.println(aperturaCassa+";"+chiusuraCassa+";"+differenza+";"+dataOdierna);
            fOUT.flush();
            try{
                f.close();
            }
            catch(IOException e){
            }
            // salvo la data dell'ultio utilizzo e il numero di fatture emesse in quella giornata
            try {
                f=new FileWriter("Info.txt");
                fOUT=new PrintWriter(f);
            } catch (IOException e) {
                System.exit(1);
            }
            fOUT.println(dataOdierna);
            fOUT.println(nRicevute);
            fOUT.flush();
            try{
                f.close();
            }
            catch(IOException e){
            }
            System.exit(0);
        }
        
    }//GEN-LAST:event_bottoneChiusuraCassaActionPerformed
    // in caso l'utente clicca sulla croce per chiudere la finestra, viene controllata l'uscita e viene eseguito il metodo di chiusura cassa
    private void chiusuraProgrammaCassa(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_chiusuraProgrammaCassa
        bottoneChiusuraCassaActionPerformed(null);
    }//GEN-LAST:event_chiusuraProgrammaCassa
    // carico il menu tramite string tokenizer dal csv e viene inserito nella rispettiva tabella in base al file letto
    public static void caricaMenu(){
        for(int i = 0;i<2;i++){
            FileReader f= null;
            BufferedReader fIN=null;
            String s;
            StringTokenizer st;

            try {
                f=new FileReader(nomiFile[i] + ".txt");
                fIN =new BufferedReader(f);
            } catch (IOException e) {
                System.out.println("Errore nell'apertura del file");
                System.exit(1);
            }
            try {
                s= fIN.readLine();
                while(s!=null){
                    st=new StringTokenizer(s,"-");
                    if(i==0){
                        nCibo++;
                        String nomeTemp = (String)st.nextToken();
                        float prezzoTemp = Float.valueOf(st.nextToken());
                        Object[] nuovaRiga = {null,nomeTemp, prezzoTemp};
                        ((DefaultTableModel) tabellaCibo.getModel()).addRow(nuovaRiga);
                        
                    } else {
                        nBere++;
                        String nomeTemp = (String)st.nextToken();
                        float prezzoTemp = Float.valueOf(st.nextToken());
                        Object[] nuovaRiga = {null,nomeTemp, prezzoTemp};
                        ((DefaultTableModel) tabellaBere.getModel()).addRow(nuovaRiga);
                    }
                    s=fIN.readLine();
                }
            } catch (Exception e) {
                System.out.println("Errore nella lettura del file");
                System.exit(1);
            }
            try {
                f.close();
            } catch(IOException e){
                System.out.println("Errore nella chiusura del file");
                System.exit(1);
            }
        }
        

    }
     /*
        Viene permesso all'utente di inserire dei prodotti, modificare il prezzo o rimuoverli.
        il pulsante inserisci modifica controlla se è gia presente il nome del prodotto. in caso affermativo inserisce il nuovo prezzo. in caso contrario inserisce una nuova riga con le caratteristiche digitate e nella sezione prescelta
        selezionando elimina, viene rimosso l'elemento dalla tabella
        */
    private void bottoneInserimentoProdottoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottoneInserimentoProdottoActionPerformed
       
        String[] opzioni = {"Annulla", "Inserisci/Modifica", "Elimina"};
        int scelta = JOptionPane.showOptionDialog(null, "Seleziona un'azione:", "Modifica elemento", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, opzioni, opzioni[0]);   
        if (scelta == 1) {
            try {
                String nomeProdotto = campoNomeNuovoProdotto.getText();
                if(nomeProdotto.equals("") || nomeProdotto.contains("-")){
                    throw new Exception();
                }
                float prezzoNuovoProdotto = Float.parseFloat(campoPrezzoNuovoProdotto.getText());
                String tipo = (String)comboInserimentoProdotto.getSelectedItem();
                int rowControllo=-1;
                if(tipo.equals("Cucina")){
                    for(int i = 0;i<=nCibo;i++){
                        if(tabellaCibo.getValueAt(i, 1).equals(nomeProdotto)){
                            rowControllo=i;
                            break;
                        }
                    }
                    if(rowControllo!=-1){
                        tabellaCibo.setValueAt(prezzoNuovoProdotto, rowControllo, 2);
                    } else {
                        Object[] nuovaRiga = {null,nomeProdotto, prezzoNuovoProdotto};
                        ((DefaultTableModel) tabellaCibo.getModel()).addRow(nuovaRiga);
                        nCibo++;
                    }
                } else {
                    for(int i = 0;i<=nBere;i++){
                        if(tabellaBere.getValueAt(i, 1).equals(nomeProdotto)){
                            rowControllo=i;
                            break;
                        }
                    }
                    if(rowControllo!=-1){
                        tabellaBere.setValueAt(prezzoNuovoProdotto, rowControllo, 2);
                    } else {
                        Object[] nuovaRiga = {null,nomeProdotto, prezzoNuovoProdotto};
                        ((DefaultTableModel) tabellaBere.getModel()).addRow(nuovaRiga);
                        nBere++;
                    }
                }
                campoNomeNuovoProdotto.setText("");
                campoPrezzoNuovoProdotto.setText("");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Errore nell'inserimento del prodotto", "Errore", JOptionPane.ERROR_MESSAGE);
            }
        } else if(scelta==2){
            String nomeProdotto = campoNomeNuovoProdotto.getText();
            String tipo = (String)comboInserimentoProdotto.getSelectedItem();
            boolean cancellato = false;
            if(tipo.equals("Cucina")){
                    for(int i = 0;i<=nCibo;i++){
                        if(tabellaCibo.getValueAt(i, 1).equals(nomeProdotto)){
                            ((DefaultTableModel) tabellaCibo.getModel()).removeRow(i);
                            nCibo--;
                            cancellato = true;
                            break;
                        }
                    }
                    
                } else {
                    for(int i = 0;i<=nBere;i++){
                        if(tabellaBere.getValueAt(i, 1).equals(nomeProdotto)){
                            ((DefaultTableModel) tabellaBere.getModel()).removeRow(i);
                            nBere--;
                            cancellato = true;
                            break;
                        }
                    }
                }
            if(!cancellato){
                JOptionPane.showMessageDialog(null, "Prodotto non presente nel menu", "Errore", JOptionPane.ERROR_MESSAGE);
            }
            
        }
        
    }//GEN-LAST:event_bottoneInserimentoProdottoActionPerformed
    // dove il programma trova un numero nelle quantità, inserisce il prodotto con le sue caratteristiche negli array corrispondenti
    // successivamente viene stampato lo scontrino con numero, data, ora, prodotti con prezzo e quantità, totale
    private void bottoneContoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottoneContoActionPerformed
        
        ArrayList<String> prodottiAcquistati = new ArrayList<String>();
        ArrayList<Float> prezzoProdottiAcquistati = new ArrayList<Float>();
        ArrayList<Integer> unitaAcquistate = new ArrayList<Integer>();
        try {
            for(int i = 0; i<=nCibo;i++){
                if(!(tabellaCibo.getValueAt(i, 0)==null)){
                    int nTemp = (Integer)tabellaCibo.getValueAt(i, 0);
                    if(nTemp<0){
                        throw new Exception();
                    } else {
                        unitaAcquistate.add(nTemp);
                        prodottiAcquistati.add((String)tabellaCibo.getValueAt(i, 1));
                        float prezzoUnitario = (float)tabellaCibo.getValueAt(i, 2);
                        prezzoProdottiAcquistati.add(prezzoUnitario*nTemp);
                    }
                }  
            }
            for(int i = 0; i<=nBere;i++){
                if(!(tabellaBere.getValueAt(i, 0)==null)){
                    int nTemp = (Integer)tabellaBere.getValueAt(i, 0);
                    if(nTemp<0){
                        throw new Exception();
                    } else {
                        unitaAcquistate.add(nTemp);
                        prodottiAcquistati.add((String)tabellaBere.getValueAt(i, 1));
                        float prezzoUnitario = (float)tabellaBere.getValueAt(i, 2);
                        prezzoProdottiAcquistati.add(prezzoUnitario*nTemp);
                    }
                }  
            }
            FileWriter f=null;
            PrintWriter fOUT= null;
            try {
                f=new FileWriter("Ricevuta.txt");
                fOUT=new PrintWriter(f);
            } catch (IOException e) {
                System.out.println("Errore nell'apertura del file");
                System.exit(1);
            }
            nRicevute++;
            fOUT.println(nomeFesta + "\n");
            fOUT.println("------------------------------------");
            fOUT.println("Ricevuta n." + nRicevute);
            fOUT.println(dataOdierna + String.format("%-8s", "") + adesso.format(formatoOra));
            fOUT.println("------------------------------------");
            for (int i = 0; i < prodottiAcquistati.size(); i++) {
                //fOUT.println(String.format("%-10s %-10s%-18s", unitaAcquistate.get(i), prodottiAcquistati.get(i), "") + "" + prezzoProdottiAcquistati.get(i));
                fOUT.println(unitaAcquistate.get(i) + " " + prodottiAcquistati.get(i) + " " + prezzoProdottiAcquistati.get(i)+"€");
                int tempInserimentogenerico=-1;
                Iterator<String> iteratore = prodottiAcquistatiGen.iterator();
                while (iteratore.hasNext()) {
                    String next = (String)iteratore.next();
                    if(next.equals(prodottiAcquistati.get(i))){
                        tempInserimentogenerico=prodottiAcquistatiGen.indexOf(prodottiAcquistati.get(i));
                        int tempNProdotto=numeroProdottiAcquistatiGen.get(tempInserimentogenerico);
                        tempNProdotto+=unitaAcquistate.get(i);
                        numeroProdottiAcquistatiGen.set(tempInserimentogenerico, tempNProdotto);
                        break;
                    }
                    
                }
                if(tempInserimentogenerico==-1){
                    prodottiAcquistatiGen.add(prodottiAcquistati.get(i));
                    numeroProdottiAcquistatiGen.add(unitaAcquistate.get(i));
                }
            }
            fOUT.println("\n");
            float prezzoTotale=0;
            for (int i = 0; i < prezzoProdottiAcquistati.size(); i++) {
                prezzoTotale+=prezzoProdottiAcquistati.get(i);
            }
            fOUT.println("------------------------------------");
            fOUT.println("Prezzo totale: " + prezzoTotale+ "€");
            fOUT.println("------------------------------------");
            fOUT.println("\n");
            fOUT.println("Grazie per averci scelto!");
            fOUT.flush();
            try{
                f.close();
            }
            catch(IOException e){
                System.out.println("Errore nella chiusura del file");
            }
            
            FileWriter f2=null;
            PrintWriter fOUT2= null;
            File file = new File("Resoconto.csv");
            try {
                f2=new FileWriter("Resoconto.csv");
                fOUT2=new PrintWriter(f2);
            } catch (IOException e) {

            }    
            for(int i = 0;i<prodottiAcquistatiGen.size();i++){
                String next = (String)prodottiAcquistatiGen.get(i);
                int next2 = (Integer)numeroProdottiAcquistatiGen.get(i);
                fOUT2.println(next+";"+next2);
            }
            fOUT2.flush();
            try{
                f2.close();
            }
            catch(IOException e){
            }
            
            PrinterJob printerJob = PrinterJob.getPrinterJob();
        // Mostra la finestra di dialogo per la selezione della stampante
        if (printerJob.printDialog()) {
            // Se l'utente ha selezionato una stampante e ha confermato, puoi procedere con la stampa
            try {
                // Leggi il contenuto del file TXT
                BufferedReader reader = new BufferedReader(new FileReader("Ricevuta.txt"));
                StringBuilder content = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    content.append(line).append("\n\n"); // Aggiungi un ritorno a capo dopo ogni riga
                }
                reader.close();
                
                // Stampa il contenuto del file sulla stampante selezionata
                printerJob.setPrintable((graphics, pageFormat, pageIndex) -> {
                    if (pageIndex > 0) {
                        return Printable.NO_SUCH_PAGE;
                    }
                    // Dividi il contenuto per linee e disegna ogni riga separatamente
                    String[] lines = content.toString().split("\n\n");
                    int y = 100; // Posizione verticale iniziale
                    for (String printLine : lines) {
                        graphics.drawString(printLine, 100, y); // Disegna la riga
                        y += 20; // Incrementa la posizione verticale per la riga successiva
                    }
                    return Printable.PAGE_EXISTS;
                });

                printerJob.print();
            } catch (IOException | PrinterException e) {
                e.printStackTrace();
            }
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Stampa dello scontrino non effettuata. Inserisci dei valori validi.", "Errore", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bottoneContoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Festa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Festa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Festa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Festa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // imposto l'apertura di cassa e le label in base alle scelte dell'utente
                dataOdierna = adesso.format(formatoData);
                caricaInfo();
                
                FileReader f= null;
                BufferedReader fIN=null;
                String s;
                StringTokenizer st;

                try {
                    f=new FileReader("Resoconto.csv");
                    fIN =new BufferedReader(f);
                } catch (IOException e) {
                }
                try {
                    s= fIN.readLine();
                    while(s!=null){
                        st=new StringTokenizer(s,";");
                        String tempNome = st.nextToken();
                        int tempQuantita = Integer.valueOf(st.nextToken());
                        prodottiAcquistatiGen.add(tempNome);
                        numeroProdottiAcquistatiGen.add(tempQuantita);
                        s=fIN.readLine();
                    }
                } catch (Exception e) {

                }
                try {
                    f.close();
                } catch(Exception e){

                }
                
                boolean ripeti=false;
                do{
                    String inputValue = JOptionPane.showInputDialog(null, "Apertura di cassa:", "Apertura cassa", JOptionPane.INFORMATION_MESSAGE);
                    //String inputValue = JOptionPane.showInputDialog("Apertura di cassa:");  
                    if(inputValue==null){
                            new Festa().setVisible(true);
                            labelAperturaCassa.setText("Apertura di cassa: " + "DA INSERIRE");
                            labelAperturaCassa.setForeground(Color.RED);
                            aperturaDaInserire=true;
                            caricaMenu();
                            break;
                    } else {
                        try {
                        
                            float numero;
                            numero = Float.parseFloat(inputValue);
                            aperturaCassa=numero;
                            ripeti=false;
                            new Festa().setVisible(true);
                            jLabel1.setText(nomeFesta);
                            labelAperturaCassa.setText("Apertura di cassa: " + aperturaCassa+"€");
                            aperturaDaInserire=false;
                            labelData.setText("Data: " + dataOdierna);
                            caricaMenu();
                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(null, "Inserisci un numero valido", "Errore", JOptionPane.ERROR_MESSAGE);
                            ripeti=true;
                        }
                    }
                } while(ripeti);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bottoneChiusuraCassa;
    private javax.swing.JButton bottoneConto;
    private javax.swing.JButton bottoneInserimentoProdotto;
    private javax.swing.JTextField campoNomeNuovoProdotto;
    private javax.swing.JTextField campoPrezzoNuovoProdotto;
    private javax.swing.JComboBox<String> comboInserimentoProdotto;
    private static javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JLabel labelAperturaCassa;
    private static javax.swing.JLabel labelData;
    private javax.swing.JPanel pannello2Tabelle;
    private javax.swing.JPanel pannelloBottoneConto;
    private javax.swing.JPanel pannelloIntestazione;
    private javax.swing.JPanel pannelloNomeFesta;
    private javax.swing.JPanel pannelloSottoIntestazione;
    private static javax.swing.JTable tabellaBere;
    private static javax.swing.JTable tabellaCibo;
    // End of variables declaration//GEN-END:variables
}
